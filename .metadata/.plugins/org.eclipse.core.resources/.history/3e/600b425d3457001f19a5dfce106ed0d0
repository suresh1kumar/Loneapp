package com.bank.loneapplication.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;

import com.bank.loneapplication.client.CustomerClient;
import com.bank.loneapplication.dto.CustomerDTO;
import com.bank.loneapplication.dto.LoanApplicationDto;
import com.bank.loneapplication.entity.Loan;
import com.bank.loneapplication.entity.LoanApplication;
import com.bank.loneapplication.enums.LoanLimit;
import com.bank.loneapplication.enums.LoanScoreResult;
import com.bank.loneapplication.enums.LoanStatus;
import com.bank.loneapplication.enums.LoanType;
import com.bank.loneapplication.exception.InvalidLoanApplicationException;
import com.bank.loneapplication.exception.LoanNotFoundException;
import com.bank.loneapplication.repository.LoanApplicationRepository;
import com.bank.loneapplication.repository.LoanRepository;

@Service
public class LoanApplicationService {

   @Autowired
    private LoanApplicationRepository loanApplicationRepository;
   
   @Autowired
   private CustomerClient customerClient;
 
   @Autowired
   private  LoanRepository loanRepository;
   
   public LoanApplication add(LoanApplication loneapp) {
  
       return loanApplicationRepository.save(loneapp);
   }

   @GetMapping
   public List<LoanApplication> findAll() {
     
       return loanApplicationRepository.findAll();
   }

   
  
   public List<LoanApplicationDto> findByNationalIdentityNumber(String nationalIdentityNumber) {

	   List<LoanApplication> l=loanApplicationRepository.findAll();
	   List<LoanApplicationDto> p=new ArrayList<LoanApplicationDto>();
	   List<LoanApplicationDto> p1=new ArrayList<LoanApplicationDto>();
	   for (LoanApplication loanApplication : l) {
		   LoanApplicationDto ld=new LoanApplicationDto();
		   ld.setId(loanApplication.getId());
		   ld.setNationalIdentityNumber(loanApplication.getNationalIdentityNumber());
		   ld.setNotification_id(loanApplication.getNotification_id());
		   p.add(ld);
	}
	   p1.addAll(p);
	   return p1.stream()
			   .filter(a -> a.getNationalIdentityNumber().equals(nationalIdentityNumber))
					   .toList();
   }
   
   private Loan createLoan() {
       var newLoan = new Loan(LoanType.PERSONAL, 0.0, LoanScoreResult.NOT_RESULTED, LoanStatus.ACTIVE, new Date());
       loanRepository.save(newLoan);
       return newLoan;
   }

   public void createLoanApplication(String nationalIdentityNumber) {
	   //Optional<MyEntity> optionalEntity = Optional.ofNullable(entity);
	   Optional<CustomerDTO> customerByNationalIdentityNumber1 = customerClient.findByCustomer(nationalIdentityNumber);
       
	   var optionalEntity = Optional.ofNullable(customerByNationalIdentityNumber1);
	   
	   var customerByNationalIdentityNumber = customerClient.findByCustomer(nationalIdentityNumber);
	   
       customerByNationalIdentityNumber.ifPresent(customer -> {
           LoanApplication loanApplication = new LoanApplication(optionalEntity.get().get().getNationalIdentityNumber(), createLoan());
           loanApplicationRepository.save(loanApplication);
       });
   }



   public Loan getLoanApplicationResult(String nationalIdentityNumber) {
       LoanApplication finalizedApplication = finalizeLoanApplication(nationalIdentityNumber);

       if (finalizedApplication.getLoan().getLoanScoreResult().equals(LoanScoreResult.NOT_RESULTED)) {
           throw new InvalidLoanApplicationException("!");
       } else if (finalizedApplication.getLoan().getLoanScoreResult().equals(LoanScoreResult.REJECTED)) {
           return finalizedApplication.getLoan();
       }
       return finalizedApplication.getLoan();
   }


   private Loan loanLimitCalculator(LoanApplication loanApplication) {
	   Optional<CustomerDTO> customerByNationalIdentityNumber = customerClient.findByCustomer(loanApplication.getNationalIdentityNumber());
	   var loanScore=0;
	   var income =0.0;
	   if(customerByNationalIdentityNumber.isPresent())
	   {
		    loanScore = customerByNationalIdentityNumber.get().getLoanScore();
		    income = customerByNationalIdentityNumber.get().getMonthlyIncome();
	   }
       var loan = loanApplication.getLoan();
       var loanCustomer = loanApplication.getNationalIdentityNumber();
      // var loanScore = loanCustomer.getLoanScore();
       //var income = loanCustomer.getMonthlyIncome();
       var loanMultiplier = loan.getCreditMultiplier();

       var loanLimitCheck = (income >= LoanLimit.HIGHER.getLoanLimitAmount());
       var loanScoreCheck = (loanScore >= LoanScoreResult.APPROVED.getLoanScoreLimit());

       if (loanScoreCheck) {
           LoanLimit.SPECIAL.setLoanLimitAmount(income * loanMultiplier);
           loan.setLoanLimit(LoanLimit.SPECIAL.getLoanLimitAmount());
       } else if (loanLimitCheck) {
           loan.setLoanLimit(LoanLimit.HIGHER.getLoanLimitAmount());
       } else {
           loan.setLoanLimit(LoanLimit.LOWER.getLoanLimitAmount());
       }
       return loan;
   }

   private void verifyLoan(LoanApplication loanApplication) {
	   Optional<CustomerDTO> customerByNationalIdentityNumber = customerClient.findByCustomer(loanApplication.getNationalIdentityNumber());
	   
       //var loanCustomer = loanApplication.getCustomer();

       var loanToUpdate = getNotResultedLoanApplicationOfCustomer(loanApplication);
       if (loanToUpdate == null) return;
       //log.info("Getting loan application for result");

       var loanScore = customerByNationalIdentityNumber.get().getLoanScore();
       var loanScoreForApproval = (loanScore >= LoanScoreResult.REJECTED.getLoanScoreLimit());

       if (loanScoreForApproval) {
           loanToUpdate.setLoanScoreResult(LoanScoreResult.APPROVED);
           loanApplication.setLoan(loanToUpdate);
           loanToUpdate = loanLimitCalculator(loanApplication);
           //loanApplication.setLoan(loanToUpdate);
       } else {
           loanToUpdate.setLoanScoreResult(LoanScoreResult.REJECTED);
           loanToUpdate.setLoanStatus(LoanStatus.INACTIVE);
       }
       loanRepository.save(loanToUpdate);
       //log.info("resulted the application");
       //TODO: modify sms
       //log.info("Sent sms result");
   }

   private Loan getNotResultedLoanApplicationOfCustomer(LoanApplication customer) {
	   var a=customer.getLoan().getLoanScoreResult().equals(LoanScoreResult.NOT_RESULTED);
//Optional<LoanApplication> optionalUser = Optional.ofNullable(a);
      // var optionalLoan = customer.stream()
                     //  .filter(c -> c.getLoan().getLoanScoreResult().equals(LoanScoreResult.NOT_RESULTED))
                      // .findFirst();
       //Optional.ofNullable(a).isPresent() ? Optional.ofNullable(a)
       return Optional.ofNullable(a).isPresent() ? customer.getLoan() : null;

   }

   private LoanApplication finalizeLoanApplication(String nationalIdentityNumber) {
       Optional<Customer> customerByNationalIdentityNumber = customerRepository.findByNationalIdentityNumber(nationalIdentityNumber);

       if (customerByNationalIdentityNumber.isPresent()) {
           LoanApplication loanApplication1 = customerByNationalIdentityNumber.get().getLoanApplications().stream()
                   .findFirst()
                   .get();
           verifyLoan(loanApplication1);
       }

       return customerByNationalIdentityNumber.get().getLoanApplications().stream()
               .filter(loanApplication -> loanApplication.getCustomer() == customerByNationalIdentityNumber.get())
               //.filter(loanApplication -> loanApplication.getLoan().getLoanStatus() == LoanStatus.ACTIVE)
               .findAny()
               .orElseThrow(() -> new InvalidLoanApplicationException("."));
   }




   protected Optional<LoanApplication> findLoanApplicationById(Long id) {
       return Optional.ofNullable(loanApplicationRepository.findById(id).orElseThrow(() ->
               new LoanNotFoundException("Related loan with id: " + id + " not found")));
   }

   public LoanApplication getLoanApplicationById(Long loanApplicationId) {
       return findLoanApplicationById(loanApplicationId).get();
   }
   
  
    

}
